#!/usr/bin/env bb

(require '[babashka.cli :as cli]
         '[babashka.classpath :as cp]
         '[babashka.deps :as deps]
         '[babashka.fs :as fs]
         '[clojure.edn :as edn]
         '[clojure.pprint]
         '[clojure.set :as set]
         '[clojure.string :as str])

(deps/add-deps '{:deps {com.github.emil0r/porter {:git/url "https://github.com/emil0r/porter"
                                                  :sha     "8077f9e6a7e0b8967ac33f2eea7f3a15b8675275"}}})

(require '[porter.core :as porter])


(defn show-help
  [spec]
  (cli/format-opts (merge spec {:order (vec (keys (:spec spec)))})))

(def cli-spec
  {:spec
   {:env              {:coerce :keyword
                       :desc   "Which environment are we using"}
    :src              {:coerce [:string]
                       :desc   "Source of input. String or file. Can be multiple lines which will be joined together with a newline in between each entry. This is meant mainly for exec (blame Make)"}
    :injections       {:desc "Map of injections to the context map"}
    :classpaths       {:coerce [:string]
                       :desc   "Classpaths to add"}
    :namespaces       {:coerce [:string]
                       :desc   "Namespaces to add"}
    :dest             {:coerce :string
                       :desc   "Which file to write the output to"}
    :print            {:coerce :boolean
                       :desc   "Print the output to stdout"}
    :print-ctx        {:coerce :boolean
                       :desc   "Print ctx map to stdout"}
    :print-injections {:coerce :boolean
                       :desc   "Print injections to stdout"}
    :exec             {:coerce :boolean
                       :desc   "Execute the src as a shell command"}
    :ctx-paths        {:coerce   [:string]
                       :desc     "vector of strings to context edn files"
                       :required true}}

   :error-fn ;; a function to handle errors
   (fn [{:keys [_spec type cause msg option] :as _data}]
     (when (= :org.babashka/cli type)
       (case cause
         :require
         (println
          (format "Missing required argument: %s\n" option))
         :validate
         (println
          (format "%s does not exist!\n" msg)))))})

(defn -main [& args]
  (let [opts       (cli/parse-opts args cli-spec)
        injections (when (string? (:injections opts))
                     (try (edn/read-string (:injections opts))
                          (catch Exception _
                            (println "Unable to read injections"))))
        namespaces (map symbol (:namespaces opts))]

    (when (or (seq (:classpaths opts))
              (seq namespaces))
      (println "\n--- Loading classpaths/namespaces ---\n")
      (doseq [path (:classpaths opts)]
        (println (format "Adding classpath '%s'" path))
        (cp/add-classpath path))
      (doseq [ns namespaces]
        (println (format "Requiring %s" (str ns)))
        (require [ns]))
      (println "\n--- Classpaths/namespaces loaded  ---\n"))
    (cond
      (or (:help opts)
          (:h opts)
          (empty? opts))
      (do (println "\n-- Options --\n")
          (println (show-help cli-spec)))

      (or (not (contains? opts :env))
          (not (contains? opts :src))
          (not (contains? opts :ctx-paths)))
      (do (println "env, src and ctx-paths are required")
          (println "You are currently missing" (set/difference #{:env :src :ctx-paths} (set (keys opts)))))

      (:print-injections opts)
      (clojure.pprint/pprint injections)

      (:print-ctx opts)
      (clojure.pprint/pprint
       (porter/create-ctx (merge {:env (:env opts)} injections)
                          (:ctx-paths opts)
                          namespaces))


      (fs/exists? (str/join "\n" (:src opts)))
      (porter/build-output-from-file
       (:env opts)
       (str/join "\n" (:src opts))
       {:dest       (:dest opts)
        :print      (:print opts)
        :exec       (:exec opts)
        :injections injections
        :namespaces namespaces}
       (:ctx-paths opts))

      :else
      (porter/build-output
       (:env opts)
       (str/join "\n" (:src opts))
       {:dest       (:dest opts)
        :print      (:print opts)
        :exec       (:exec opts)
        :injections injections
        :namespaces namespaces}
       (:ctx-paths opts)))))


(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))
